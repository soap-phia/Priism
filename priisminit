#!/bin/bash -l
clear
echo "Priism 2.0 init system"
export PATH=/sbin:/bin:/usr/sbin:/usr/bin
source /etc/profile
if mount | grep -q '^devtmpfs'; then
  echo "devtmpfs already mounted"
else
  mount -t devtmpfs devtmpfs /dev || {
    echo "Failed to mount devtmpfs, fallback to mknod"
  }
fi

setsid -c test # Should fix trapping INT.

mount -t proc proc /proc
mount -t sysfs sys /sys
mount -t tmpfs tmp /tmp

if ! mount | grep -q '^devtmpfs'; then
  echo "Creating /dev nodes..."

  mkdir -p /dev
  mknod -m 666 /dev/null c 1 3
  mknod -m 666 /dev/zero c 1 5
  mknod -m 666 /dev/full c 1 7
  mknod -m 666 /dev/random c 1 8
  mknod -m 666 /dev/urandom c 1 9
  mknod -m 666 /dev/tty c 5 0
  mknod -m 600 /dev/console c 5 1
fi

mkdir -p /dev/pts
mount -t devpts devpts /dev/pts

if [ -d /proc/self/fd ] && [ ! -e /dev/fd ]; then
  ln -s /proc/self/fd /dev/fd
fi

echo "Starting udevd."
/sbin/udevd --daemon
udevadm trigger
udevadm settle

echo "Launching Priism."
# Little fun trivia here;
# From my experience developing XINY I learned quite a lot about init systems and how they work.
# The task of creating an incredibly basic one for 2.0 didn't quite hit my mind at first, but it clicked soon enough.

# Here we are, a few months later and i'm struggling with job control.
# I tried using agetty- that won't work for our case. But I found something... interesting.
# If you call agetty from a shim with the right arguments- you just see the standard "Developer Console" splash.
# Anyway here's this bullshit. The job control is something I gave up on. setsid works for what we need.
source /etc/environment
source /usr/sbin/sh1mmer_main.sh
